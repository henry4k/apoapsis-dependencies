GENERATED += build/toolchain.cmake $(addprefix build/,$(C_LIB_NAMES))

AUTOTOOLS_ARGS  = "CC=$(CC)"
AUTOTOOLS_ARGS += "CXX=$(CXX)"
AUTOTOOLS_ARGS += "CPP=$(CPP)"
AUTOTOOLS_ARGS += "CFLAGS=$(CFLAGS)"
AUTOTOOLS_ARGS += "CXXFLAGS=$(CXXFLAGS)"
AUTOTOOLS_ARGS += "LDFLAGS=$(LDFLAGS)"
AUTOTOOLS_ARGS += "--with-sysroot=$(ROOT_PATH)"
AUTOTOOLS_ARGS += "--host=$(AUTOTOOLS_HOST)"
AUTOTOOLS_ARGS += "--disable-shared"

build/toolchain.cmake:
	echo '# FILE IS GENERATED BY MAKE - DO NOT EDIT' > $@
	echo 'set(CMAKE_SYSTEM_NAME $(SYSTEM_NAME))' >> $@
	echo 'set(CMAKE_C_COMPILER "$(CC)")' >> $@
	echo 'set(CMAKE_CXX_COMPILER "$(CXX)")' >> $@
	echo 'set(CMAKE_RC_COMPILER "$(WINDRES)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH "$(ROOT_PATH)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> $@

define build-cmake
	rm -rf $@
	mkdir $@
	cd $@ && cmake "$(abspath src/$(notdir $@))" \
	               "-DCMAKE_C_FLAGS=$(CFLAGS)" \
	               "-DCMAKE_CXX_FLAGS=$(CXXFLAGS)" \
	               "-DCMAKE_LINK_FLAGS=$(LDFLAGS)" \
	               "-DCMAKE_TOOLCHAIN_FILE=$(abspath build/toolchain.cmake)" \
	               "-C$(abspath build/$(notdir $@).cmake)" \
	               $(1)
	cd $@ && $(MAKE)
endef

define build-autotools
	rm -rf $@
	cp -R src/$(notdir $@) $@
	cd $@ && ./configure $(AUTOTOOLS_ARGS) $(1)
	cd $@ && touch Makefile.in # Workaround for a weird timing bug .. or so
	cd $@ && make
endef

build/openal-soft: src/openal-soft build/toolchain.cmake
	$(call build-cmake)

build/ogg: src/ogg
	$(call build-autotools)

build/vorbis: src/vorbis build/ogg
	$(call build-autotools,"OGG_CFLAGS=-I$(abspath build/ogg/include)" \
	                       "OGG_LIBS=-L$(abspath build/ogg/src/.libs)")

build/alure: src/alure build/toolchain.cmake build/openal-soft build/vorbis
	$(call build-cmake)

build/zlib: src/zlib build/toolchain.cmake
	$(call build-cmake)

build/physfs: src/physfs build/toolchain.cmake build/zlib
	$(call build-cmake)

build/lua: src/lua
	rm -rf $@
	cp -R src/lua $@
	cd $@ && $(MAKE) PLAT=generic \
	                 "CC=$(CC)" \
	                 "CFLAGS=$(CFLAGS)" \
	                 "LDFLAGS=$(LDFLAGS)" \
	                 "AR=$(AR) rcu" \
	                 "RANLIB=$(RANLIB)"

build/lua-cjson: src/lua-cjson build/toolchain.cmake
	$(call build-cmake)

build/glfw: src/glfw build/toolchain.cmake
	$(call build-cmake)

build/bullet: src/bullet build/toolchain.cmake
	$(call build-cmake)
