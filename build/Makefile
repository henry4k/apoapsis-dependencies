include ../config.mk
GENERATED = .gitignore toolchain.cmake openal-soft ogg vorbis alure zlib physfs lua lua-cjson glfw bullet

HERE = $(shell pwd)
ROOT = $(shell cd .. && pwd)

AUTOTOOLS_ARGS  = "CC=$(CC)"
AUTOTOOLS_ARGS += "CXX=$(CXX)"
AUTOTOOLS_ARGS += "CPP=$(CPP)"
AUTOTOOLS_ARGS += "CFLAGS=$(CFLAGS)"
AUTOTOOLS_ARGS += "CXXFLAGS=$(CXXFLAGS)"
AUTOTOOLS_ARGS += "--with-sysroot=$(ROOT_PATH)"
AUTOTOOLS_ARGS += "--host=$(AUTOTOOLS_HOST)"
AUTOTOOLS_ARGS += "--disable-shared"

all: $(GENERATED)

clean:
	rm -fr $(GENERATED)

.PHONY: all clean

.gitignore:
	echo '# FILE IS GENERATED BY MAKE - DO NOT EDIT' > $@
	for file in $(GENERATED) ; do \
		echo /$$file >> $@ ; \
	done

toolchain.cmake:
	echo '# FILE IS GENERATED BY MAKE - DO NOT EDIT' > $@
	echo 'set(CMAKE_SYSTEM_NAME $(TARGET))' >> $@
	echo 'set(CMAKE_C_COMPILER "$(CC)")' >> $@
	echo 'set(CMAKE_CXX_COMPILER "$(CXX)")' >> $@
	echo 'set(CMAKE_RC_COMPILER "$(WINDRES)")' >> $@
	echo 'set(CMAKE_C_FLAGS "$(CFLAGS)")' >> $@
	echo 'set(CMAKE_CXX_FLAGS "$(CXXFLAGS)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH "$(ROOT_PATH)")' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_PROGRAM NEVER)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_LIBRARY ONLY)' >> $@
	echo 'set(CMAKE_FIND_ROOT_PATH_MODE_INCLUDE ONLY)' >> $@
	echo 'set(CMAKE_BUILD_TYPE Release)' >> $@

define get-src
	cd $(ROOT)/src && $(MAKE) $@
endef

define build-cmake
	$(get-src)
	rm -rf $@
	mkdir $@
	cd $@ && cmake $(ROOT)/src/$@ -DCMAKE_TOOLCHAIN_FILE=$(HERE)/toolchain.cmake -C$(HERE)/$@.cmake
	cd $@ && $(MAKE)
endef

define build-autotools
	$(get-src)
	rm -rf $@
	cp -R $(ROOT)/src/$@ $@
	cd $@ && ./configure $(AUTOTOOLS_ARGS)
	cd $@ && touch Makefile.in # Workaround for a weird timing bug .. or so
	cd $@ && make
endef

openal-soft: toolchain.cmake
	$(build-cmake)

ogg:
	$(build-autotools)

vorbis: AUTOTOOLS_ARGS += "OGG_CFLAGS=-I$(HERE)/ogg/include"
vorbis: AUTOTOOLS_ARGS += "OGG_LIBS=-L$(HERE)/ogg/src/.libs"
vorbis: ogg
	$(build-autotools)

alure: toolchain.cmake openal-soft vorbis
	$(build-cmake)

zlib: toolchain.cmake
	$(build-cmake)

physfs: toolchain.cmake zlib
	$(build-cmake)

lua:
	$(get-src)
	rm -rf $@
	cp -R $(ROOT)/src/$@ $@
	cd $@ && $(MAKE) PLAT=generic \
					 "CC=$(CC)" \
					 "CFLAGS=$(CFLAGS)" \
					 "LDFLAGS=$(LDFLAGS)" \
					 "AR=$(AR) rcu" \
					 "RANLIB=$(RANLIB)"

lua-cjson: toolchain.cmake
	$(build-cmake)

glfw: toolchain.cmake
	$(build-cmake)

bullet: toolchain.cmake
	$(build-cmake)
